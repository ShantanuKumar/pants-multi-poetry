[GLOBAL]
pants_version = "2.14.0"
pythonpath = ["%(buildroot)s/pants-plugins"]
backend_packages.add = [
  "pants.backend.build_files.fmt.black",
  "pants.backend.python",
  "pants.backend.docker",
  "pants.backend.docker.lint.hadolint",
  "pants.backend.experimental.python.lint.autoflake",
  "pants.backend.python.lint.bandit",
  "pants.backend.python.lint.black",
  "pants.backend.python.lint.docformatter",
  "pants.backend.python.lint.flake8",
  "pants.backend.python.typecheck.mypy",
  "pants.backend.python.lint.isort",
  "pants.backend.plugin_development",
]
pants_ignore.add = ["/pants-plugins"]

[source]
root_patterns = [
  "/src/package-a",
  "/src/package-b"
]

[python]
interpreter_constraints = ["CPython>=3.9,<3.11"]
enable_resolves = true
default_resolve = "multi-poetry"

[python.resolves]
multi-poetry = "multi-poetry.lock"
common_a_b = "common_a_b.lock"

[anonymous-telemetry]
enabled = false

[setup-py-generation]
generate_setup_default = true

[mypy]
version = "mypy>=0.971"
extra_requirements.add = ["pydantic>=1.9.1", "pandas-stubs", "types-requests>=2.28.11"]
extra_type_stubs = ["pandas-stubs", "types-requests>=2.28.11"]
lockfile = "mypy.lock"

[pytest]
xdist_enabled = false

[test]
use_coverage = true

[coverage-py]
global_report = false
filter = ["src/package-a"]
interpreter_constraints = [">=3.9"]
report = ["console"]
